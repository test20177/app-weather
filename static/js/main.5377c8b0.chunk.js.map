{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","onChange","change","placeholder","Result","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","APIKey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleDateString","sys","main","speed","catch","console","log","prevState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAmBeA,EAhBF,SAAAC,GACT,OACI,6BACI,0BAAMC,SAAUD,EAAME,QAClB,2BACIC,KAAK,OACLC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,OAChBC,YAAY,iBAEhB,sDCsBDC,G,MAhCA,SAAAR,GAAU,IAAD,EAC+CA,EAAMS,QAAjEC,EADY,EACZA,KAAMC,EADM,EACNA,KAAMC,EADA,EACAA,QAASC,EADT,EACSA,OAAQC,EADjB,EACiBA,KAAMC,EADvB,EACuBA,SAAUC,EADjC,EACiCA,KAAMC,EADvC,EACuCA,IAEvDC,EAAU,KAEd,IAAID,GAAON,EAAM,CACb,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAE3CH,EACI,oCACI,uDAA4B,4BAAKP,IACjC,wDAA8BD,GAC9B,qDAA2BI,EAA3B,UACA,qEAA8BK,GAC9B,qEAA8BG,GAC9B,0DAA2BN,EAA3B,QACA,wDAAyBD,EAAzB,SAQZ,OACI,yBAAKQ,UAAU,UACVN,EAAG,2BAAuBN,GAAQO,KCxBzCM,G,MAAS,oCAyEAC,E,4MArEbC,MAAQ,CACNtB,MAAO,GACPM,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,KAAK,G,EAGPU,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZzB,MAAOwB,EAAEE,OAAO1B,S,EAIpB2B,iBAAmB,SAAAH,GACjBA,EAAEI,iBACF,IAAMC,EAAG,2DAAuD,EAAKP,MAAMtB,MAAlE,kBAAiFoB,EAAjF,iBAETU,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIrB,MAAOsB,qBACtB,EAAKb,UAAU,SAAAH,GAAK,MAAK,CACvBT,KAAK,EACLP,KAAM+B,EACN7B,QAAS4B,EAAKG,IAAI/B,QAClBC,OAAQ2B,EAAKG,IAAI9B,OACjBC,KAAM0B,EAAKI,KAAK9B,KAChBC,SAAUyB,EAAKI,KAAK7B,SACpBC,KAAMwB,EAAKxB,KAAK6B,MAChBlC,KAAMe,EAAMtB,aAGjB0C,OAAM,SAAA7B,GACL8B,QAAQC,IAAI/B,GACZ,EAAKY,UAAU,SAAAoB,GACb,MAAO,CACLhC,KAAK,EACLN,KAAMsC,EAAU7C,c,uDAOxB,OACE,yBAAKmB,UAAU,OACb,kBAAC,EAAD,CACEnB,MAAO8C,KAAKxB,MAAMtB,MAClBE,OAAQ4C,KAAKvB,kBACbzB,OAAQgD,KAAKnB,mBAEf,kBAAC,EAAD,CAAQtB,QAASyC,KAAKxB,a,GAhEZyB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.5377c8b0.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst Form = props => {\r\n    return ( \r\n        <div>\r\n            <form onSubmit={props.submit} >\r\n                <input \r\n                    type=\"text\" \r\n                    value={props.value}\r\n                    onChange={props.change}\r\n                    placeholder=\"Wpisz miasto\"\r\n                ></input>\r\n                <button>Wyszukaj miasto</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst Result = props => {\r\n    const { date, city, sunrise, sunset, temp, pressure, wind, err } = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if(!err && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n        content = (\r\n            <>\r\n                <h3>Wyniki wyszukiwania dla <em>{city}</em></h3>\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <h4>Aktualna temperatura: {temp} &#176;C</h4>\r\n                <h4>Wschód słońca dzisiaj o: {sunriseTime}</h4>\r\n                <h4>Zachód słońca dzisiaj o: {sunsetTime}</h4>\r\n                <h4>Aktualna siła wiatru: {wind} m/s</h4>\r\n                <h4>Aktualne ciśnienie: {pressure} hPa</h4>\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <div className=\"result\">\r\n            {err ? `Nie mamy w bazie ${city}`: content}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result'\nimport './App.css';\n\n// Klucz do API Open Weather...\nconst APIKey = 'dd342ecc1e01ffd589e9ee349054ad5e';\n\nclass App extends Component {\n\n  state = {\n    value: \"\",\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false\n  }\n  \n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleCitySubmit = e => {\n    e.preventDefault()\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n    \n    fetch(API)\n      .then(response => {\n        if(response.ok) {\n          return response\n        }\n        throw Error(\"Nie udało się\")\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleDateString();\n          this.setState( state => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: state.value\n          }))\n      })\n      .catch(err => {\n        console.log(err)\n        this.setState( prevState => {\n          return {\n            err: true,\n            city: prevState.value\n          }})\n      })\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form \n          value={this.state.value} \n          change={this.handleInputChange} \n          submit={this.handleCitySubmit}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}